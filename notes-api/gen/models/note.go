// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Note note
// swagger:model Note
type Note struct {

	// id
	ID int64 `json:"id,omitempty"`

	// importance
	// Enum: [LOW MEDIUM HIGH]
	Importance string `json:"importance,omitempty"`

	// message
	Message *string `json:"message,omitempty"`

	// user ID
	UserID int64 `json:"userID,omitempty"`
}

// Validate validates this note
func (m *Note) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImportance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var noteTypeImportancePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOW","MEDIUM","HIGH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		noteTypeImportancePropEnum = append(noteTypeImportancePropEnum, v)
	}
}

const (

	// NoteImportanceLOW captures enum value "LOW"
	NoteImportanceLOW string = "LOW"

	// NoteImportanceMEDIUM captures enum value "MEDIUM"
	NoteImportanceMEDIUM string = "MEDIUM"

	// NoteImportanceHIGH captures enum value "HIGH"
	NoteImportanceHIGH string = "HIGH"
)

// prop value enum
func (m *Note) validateImportanceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, noteTypeImportancePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Note) validateImportance(formats strfmt.Registry) error {

	if swag.IsZero(m.Importance) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportanceEnum("importance", "body", m.Importance); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Note) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Note) UnmarshalBinary(b []byte) error {
	var res Note
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
