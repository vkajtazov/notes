// Code generated by go-swagger; DO NOT EDIT.

package notes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new notes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateNote creates note
*/
func (a *Client) CreateNote(params *CreateNoteParams) (*CreateNoteCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNoteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNote",
		Method:             "POST",
		PathPattern:        "/note",
		ProducesMediaTypes: []string{"application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNoteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNoteCreated), nil

}

/*
GetNoteByID gets note by id
*/
func (a *Client) GetNoteByID(params *GetNoteByIDParams) (*GetNoteByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNoteByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNoteById",
		Method:             "GET",
		PathPattern:        "/note/{id}",
		ProducesMediaTypes: []string{"application/json; charset=utf-8"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNoteByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNoteByIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
